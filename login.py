import sqlite3
import time
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
from registration import REGISTRATION
# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage,font

class LOGIN:

    def __init__(self):
        def relative_to_assets(path: str) -> Path:
            OUTPUT_PATH = Path(__file__).parent
            ASSETS_PATH = OUTPUT_PATH / Path(r"assets_log\frame0")
            return ASSETS_PATH / Path(path)
        if 1 == 1:
            self.window = Tk()

            self.window.geometry("1314x700")
            self.window.configure(bg="#FFFFFF")

            custom_font1 = font.Font(family='Arial', size='30')


            canvas = Canvas(
                self.window,
                bg="#FFFFFF",
                height=700,
                width=1314,
                bd=0,
                highlightthickness=0,
                relief="ridge"
            )

            canvas.place(x=0, y=0)
            image_image_1 = PhotoImage(
                file=relative_to_assets("image_1.png"))
            image_1 = canvas.create_image(
                657.0,
                350.0,
                image=image_image_1
            )

            image_image_2 = PhotoImage(
                file=relative_to_assets("image_2.png"))
            image_2 = canvas.create_image(
                1030.0,
                346.0,
                image=image_image_2
            )

            canvas.create_text(
                892.0,
                241.0,
                anchor="nw",
                text="Логин",
                fill="#6113B9",
                font=("MontserratRoman Regular", 24 * -1)
            )

            canvas.create_text(
                892.0,
                348.0,
                anchor="nw",
                text="Пароль",
                fill="#6113B9",
                font=("MontserratRoman Regular", 24 * -1)
            )
            image_image_3 = PhotoImage(
                file=relative_to_assets("image_3.png"))
            image_3 = canvas.create_image(
                1030.0,
                119.0,
                image=image_image_3
            )

            image_image_4 = PhotoImage(
                file=relative_to_assets("image_4.png"))
            image_4 = canvas.create_image(
                1030.0,
                119.0,
                image=image_image_4
            )

            image_image_5 = PhotoImage(
                file=relative_to_assets("image_5.png"))
            image_5 = canvas.create_image(
                870.0,
                363.0,
                image=image_image_5
            )

            image_image_6 = PhotoImage(
                file=relative_to_assets("image_6.png"))
            image_6 = canvas.create_image(
                871.0,
                255.0,
                image=image_image_6
            )
            entry_image_1 = PhotoImage(
                file=relative_to_assets("entry_1.png"))
            entry_bg_1 = canvas.create_image(
                1031.0,
                418.0,
                image=entry_image_1
            )

            self.entry_1 = Entry(
                bd=0,
                bg="#D9D9D9",
                fg="#000716",
                highlightthickness=0,
                show = '*',
                font=custom_font1
            )
            self.entry_1.place(
                x=867.0,
                y=395.0,
                width=328.0,
                height=44.0
            )

            entry_image_2 = PhotoImage(
                file=relative_to_assets("entry_2.png"))
            entry_bg_2 = canvas.create_image(
                1031.0,
                305.5,
                image=entry_image_2
            )
            self.entry_2 = Entry(
                bd=0,
                bg="#D9D9D9",
                fg="#000716",
                highlightthickness=0,
                font=custom_font1
            )
            self.entry_2.place(
                x=867.0,
                y=282.0,
                width=328.0,
                height=48.0
            )

        button_image_1 = PhotoImage(
            file=relative_to_assets("button_1.png"))
        # noinspection PyTypeChecker
        button_1 = Button(
            image=button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=self.button_click1,
            relief="flat"
        )
        button_1.place(
            x=857.0,
            y=498.0,
            width=348.0,
            height=75.0
        )

        button_image_2 = PhotoImage(
            file=relative_to_assets("button_2.png"))
        button_2 = Button(
            image=button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=self.button_click2,
            relief="flat"
        )
        button_2.place(
            x=857.0,
            y=606.0,
            width=348.0,
            height=55.0
        )


        self.window.resizable(False, False)
        self.window.mainloop()

    def button_click1(self):

        connection = sqlite3.connect('db/database.db')
        cursor = connection.cursor()

        # Выбираем и сортируем пользователей по возрасту по убыванию
        cursor.execute('''SELECT * FROM users ''')
        results = cursor.fetchall()

        print(results)

        connection.close()



        username = self.entry_2.get()
        password = self.entry_1.get()

        # Here you can add your authentication logic
        for row in results:
            if row[1] == username and row[2] == password:

                print("Найдена запись с нужными значениями в ячейках")
                self.window.destroy()


        return 1

    def button_click2(self):


        self.window.destroy()
        REGISTRATION()




if __name__ == "__main__":
    LOGIN()